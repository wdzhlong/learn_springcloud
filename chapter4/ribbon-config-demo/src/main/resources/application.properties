spring.application.name=ribbon-config-demo
server.port=8082

eureka.client.serviceUrl.defaultZone=http://root:123456@localhost:8761/eureka/
eureka.instance.preferIpAddress=true
eureka.instance.instance-id=${spring.application.name}:${spring.cloud.client.ip-address}:${server.port}

ribbon.eager-load.enabled=true
ribbon.eager-load.clients=ribbon-config-demo
#请求连接的超时时间
ribbon-config-demo.ribbon.ConnectTimeout=1000
#请求处理的超时时间
ribbon-config-demo.ribbon.ReadTimeout=1000
ribbon-config-demo.ribbon.maxAutoRetries=1
ribbon-config-demo.ribbon.maxAutoRetriesNextServer=3
ribbon-config-demo.ribbon.okToRetryOnAllOperations=true
ribbon-config-demo.ribbon.retryableStatusCodes=500,404,502
#在springcloud中，可通过配置的方式使用自定义的负载策略，ribbon-config-demo是调用的服务名称
#以下方式也适用Ribbon自带的负载策略
#ribbon-config-demo.ribbon.NFLoadBalancerRuleClassName=MyRule
#如果不想和Eureka集成，可以通过下面的配置方式将其禁用，当禁用之后就不能使用服务名称去调用了，必须指定地址
#ribbon.eureka.enabled=false
#禁用Eureka之后，手动配置服务调用地址，这个配置是针对具体服务的，前缀就是服务名称，配置之后就可
#以和之前一样使用服务名称来调用接口了
#ribbon-config-demo.ribbon.listOfServers=localhost:8081,localhost:8082